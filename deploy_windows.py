#!/usr/bin/env python
"""
Script de d√©ploiement pour Windows - Version corrig√©e
"""
import os
import subprocess
import sys

def run_command(command, description, use_python_m=False):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"üîÑ {description}...")
    
    # Pour Windows, utiliser python -m pip au lieu de pip directement
    if use_python_m and command.startswith('pip'):
        command = command.replace('pip', 'python -m pip')
    
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - Succ√®s")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - Erreur: {e.stderr}")
        return False

def check_requirements():
    """V√©rifie que tous les fichiers n√©cessaires sont pr√©sents"""
    required_files = [
        'requirements.txt',
        'vercel.json',
        'build_files.sh',
        'manage.py',
        'Gestion_stock/settings.py',
        'Gestion_stock/wsgi.py'
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå Fichiers manquants: {', '.join(missing_files)}")
        return False
    
    print("‚úÖ Tous les fichiers requis sont pr√©sents")
    return True

def check_python_setup():
    """V√©rifie la configuration Python"""
    print("üîç V√©rification de la configuration Python...")
    
    # V√©rifier Python
    try:
        result = subprocess.run([sys.executable, '--version'], capture_output=True, text=True)
        print(f"‚úÖ Python: {result.stdout.strip()}")
    except:
        print("‚ùå Python non trouv√©")
        return False
    
    # V√©rifier pip
    try:
        result = subprocess.run([sys.executable, '-m', 'pip', '--version'], capture_output=True, text=True)
        print(f"‚úÖ Pip: {result.stdout.strip()}")
        return True
    except:
        print("‚ùå Pip non disponible")
        return False

def prepare_for_deployment():
    """Pr√©pare l'application pour le d√©ploiement"""
    commands = [
        ("python -m pip install -r requirements.txt", "Installation des d√©pendances", True),
        ("python manage.py check", "V√©rification de la configuration Django", False),
        ("python manage.py collectstatic --noinput", "Collecte des fichiers statiques", False),
    ]
    
    for command, description, use_python_m in commands:
        if not run_command(command, description, use_python_m):
            return False
    
    return True

def main():
    print("üöÄ Pr√©paration du d√©ploiement Django pour Vercel (Windows)")
    print("=" * 60)
    
    # V√©rification de Python et pip
    if not check_python_setup():
        print("\nüîß Solutions possibles:")
        print("1. R√©installer Python depuis python.org avec 'Add to PATH' coch√©")
        print("2. Ou utiliser: python -m pip install -r requirements.txt")
        print("3. Ou utiliser un environnement virtuel:")
        print("   python -m venv venv")
        print("   venv\\Scripts\\activate")
        print("   python -m pip install -r requirements.txt")
        sys.exit(1)
    
    # V√©rification des pr√©requis
    if not check_requirements():
        sys.exit(1)
    
    # Pr√©paration du d√©ploiement
    if not prepare_for_deployment():
        print("‚ùå Erreur lors de la pr√©paration du d√©ploiement")
        sys.exit(1)
    
    print("\nüéâ Application pr√™te pour le d√©ploiement!")
    print("\nüìã √âtapes suivantes:")
    print("1. Commitez vos changements: git add . && git commit -m 'Ready for deployment'")
    print("2. Poussez vers GitHub: git push origin main")
    print("3. Connectez votre repo sur vercel.com")
    print("4. Configurez les variables d'environnement (voir .env.example)")
    print("5. D√©ployez!")
    
    print("\n‚ö†Ô∏è  RAPPEL: Vercel a des limitations avec Django.")
    print("   Pour la production, consid√©rez Railway, Render ou Heroku.")

if __name__ == "__main__":
    main()